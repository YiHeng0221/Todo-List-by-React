{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\n\nfunction setTodoToLocal(todos) {\n  window.localStorage.setItem(\"todos\", JSON.stringify(todos));\n}\n\nexport default function useTodo() {\n  _s();\n\n  // 取值\n  const id = useRef(1); // id 的初始值\n  // ref 可以拿來當 state ，再重新 render 不會改\n  // 設定初始值\n  // useState 後面傳的 function 只會執行一次，也就是 lazy initailizer\n\n  const [todos, setTodos] = useState(() => {\n    let todoData = window.localStorage.getItem(\"todos\");\n\n    if (todoData) {\n      todoData = JSON.parse(todoData);\n\n      if (todoData[0] !== undefined) {\n        id.current = todoData[0].id + 1;\n      }\n    } else {\n      todoData = [];\n    }\n\n    todoData.map(todo => {\n      if (todo.isShown == true) return todo;\n    });\n  });\n  useEffect(() => {\n    setTodoToLocal(todos);\n    console.log(`useEffect: ${JSON.stringify(todos)}`);\n    return () => {\n      console.log(`clearEffect: ${JSON.stringify(todos)}`); // 第一個參數所傳進去的 function 可以 return 另一個 function\n      // 用來在這個 Effect 被清掉之前做的事\n    };\n  }, [todos]);\n  return {\n    id,\n    todos,\n    setTodos\n  };\n}\n\n_s(useTodo, \"9QO71rMvhlpumdaqQF3RyDjh+Ns=\");","map":{"version":3,"sources":["/Users/wuyiheng/Desktop/week21/hw1/my-app/src/useTodo.js"],"names":["useState","useEffect","useRef","setTodoToLocal","todos","window","localStorage","setItem","JSON","stringify","useTodo","id","setTodos","todoData","getItem","parse","undefined","current","map","todo","isShown","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7BC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAArC;AACD;;AAED,eAAe,SAASM,OAAT,GAAmB;AAAA;;AAChC;AACA,QAAMC,EAAE,GAAGT,MAAM,CAAC,CAAD,CAAjB,CAFgC,CAEV;AACtB;AAEA;AACA;;AACA,QAAM,CAACE,KAAD,EAAQQ,QAAR,IAAoBZ,QAAQ,CAAC,MAAM;AACvC,QAAIa,QAAQ,GAAGR,MAAM,CAACC,YAAP,CAAoBQ,OAApB,CAA4B,OAA5B,CAAf;;AACA,QAAID,QAAJ,EAAc;AACZA,MAAAA,QAAQ,GAAGL,IAAI,CAACO,KAAL,CAAWF,QAAX,CAAX;;AACA,UAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgBG,SAApB,EAA+B;AAC7BL,QAAAA,EAAE,CAACM,OAAH,GAAaJ,QAAQ,CAAC,CAAD,CAAR,CAAYF,EAAZ,GAAiB,CAA9B;AACD;AACF,KALD,MAKO;AACLE,MAAAA,QAAQ,GAAG,EAAX;AACD;;AACDA,IAAAA,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU;AACrB,UAAGA,IAAI,CAACC,OAAL,IAAgB,IAAnB,EAAyB,OAAOD,IAAP;AAC1B,KAFD;AAGD,GAbiC,CAAlC;AAeAlB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,cAAc,CAACC,KAAD,CAAd;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAad,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAsB,EAAhD;AACA,WAAO,MAAM;AACXiB,MAAAA,OAAO,CAACC,GAAR,CAAa,gBAAed,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAsB,EAAlD,EADW,CAEX;AACA;AACD,KAJD;AAKD,GARQ,EAQN,CAACA,KAAD,CARM,CAAT;AAUA,SAAO;AACLO,IAAAA,EADK;AAELP,IAAAA,KAFK;AAGLQ,IAAAA;AAHK,GAAP;AAKD;;GArCuBF,O","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nfunction setTodoToLocal(todos) {\n  window.localStorage.setItem(\"todos\", JSON.stringify(todos));\n}\n\nexport default function useTodo() {\n  // 取值\n  const id = useRef(1); // id 的初始值\n  // ref 可以拿來當 state ，再重新 render 不會改\n\n  // 設定初始值\n  // useState 後面傳的 function 只會執行一次，也就是 lazy initailizer\n  const [todos, setTodos] = useState(() => {\n    let todoData = window.localStorage.getItem(\"todos\");\n    if (todoData) {\n      todoData = JSON.parse(todoData);\n      if (todoData[0] !== undefined) {\n        id.current = todoData[0].id + 1;\n      }\n    } else {\n      todoData = [];\n    }\n    todoData.map((todo) => {\n      if(todo.isShown == true) return todo\n    })\n  });\n\n  useEffect(() => {\n    setTodoToLocal(todos);\n    console.log(`useEffect: ${JSON.stringify(todos)}`);\n    return () => {\n      console.log(`clearEffect: ${JSON.stringify(todos)}`);\n      // 第一個參數所傳進去的 function 可以 return 另一個 function\n      // 用來在這個 Effect 被清掉之前做的事\n    };\n  }, [todos]); \n\n  return {\n    id,\n    todos,\n    setTodos,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}